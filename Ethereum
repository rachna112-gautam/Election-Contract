pragma solidity ^0.4.19;

contract Election{
    struct Candidate{
        string name;
        uint voteCount;
    }
    struct Voter{
        bool voted;
        uint voteindex;
        uint w;
    }
    
    address public owner;
    string public name;
    
    mapping(address => Voter) public voters;
    Candidate[] public candidate;
    uint public auctionEnd;
    
    event ElectionRe(uint a, string name, uint voteCount);
    
   function Election(string nm,uint duration, string can1, string can2){
        owner = msg.sender;
        name = nm;
        auctionEnd = now + (duration * 1 minutes);
        candidate.push(Candidate(can1,0));
        candidate.push(Candidate(can2,0));
    }
    
   function authorize(address voter)
   {
       require(msg.sender == owner);
       require(!voters[voter].voted);
       voters[voter].w = 1;
   }
   
   function vote(uint voteindex){
       require(now < auctionEnd);
       require(!voters[msg.sender].voted);
       voters[msg.sender].voted = true;
       voters[msg.sender].voteindex = voteindex;
       candidate[voteindex].voteCount += voters[msg.sender].w;
   }
   
   function end(){
       require(msg.sender == owner);
       require(now >= auctionEnd);
       
       for(uint i=0;i < candidate.length;i++)
           ElectionRe(i,candidate[i].name, candidate[i].voteCount);
   }
}
